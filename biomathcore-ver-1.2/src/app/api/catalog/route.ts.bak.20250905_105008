import { NextResponse } from "next/server";
import { getServerSession } from "next-auth";
import { authOptions } from "@/lib/auth/options";
import { prisma } from "@/lib/prisma";

export async function GET() {
  try {
    const session = await getServerSession(authOptions);
    if (!session?.user?.email) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
    }

    // Only real categories; exclude anything that looks like "Questionnaire"
    const categories = await prisma.category.findMany({
      where: {
        NOT: {
          title: { contains: "questionnaire", mode: "insensitive" },
        },
      },
      orderBy: { title: "asc" },
      select: { id: true, title: true },
    });

    // Only services, tied to valid categories, and not questionnaire-like
    const services = await prisma.service.findMany({
      where: {
        categoryId: { not: null },
        NOT: {
          OR: [
            { title: { contains: "questionnaire", mode: "insensitive" } },
            { description: { contains: "questionnaire", mode: "insensitive" } },
          ],
        },
      },
      orderBy: { title: "asc" },
      select: { id: true, title: true, description: true, categoryId: true },
    });

    return NextResponse.json({ categories, services });
  } catch (e: any) {
    console.error("Catalog GET failed:", e);
    return NextResponse.json({ error: "Internal Server Error" }, { status: 500 });
  }
}
