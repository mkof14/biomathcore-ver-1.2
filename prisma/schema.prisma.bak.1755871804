// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id           String  @id @default(cuid())
  email        String  @unique
  name         String?
  passwordHash String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  subscriptions Subscription[]
  devices       Device[]
  notes         BlackBoxNote[] // back relation for BlackBoxNote.user."
  reports       Report[]
}

model Subscription {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  stripeSubscriptionId String    @unique
  stripePriceId        String?
  plan                 String?
  status               String?
  currentPeriodEnd     DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Device {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  type        String
  name        String
  status      String   @default("connected")
  connectedAt DateTime @default(now())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model BlackBoxNote {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  title  String
  body   String
  tags   String? // comma-separated
  status String? // draft | published | archived

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

// --- Reports
model Report {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  title   String
  content Json? // arbitrary JSON payload
  status  String? // draft | ready | archived

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}
