generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// Core authentication models for NextAuth.js
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          String    @default("user") // 'user' or 'admin'
  accounts      Account[]
  sessions      Session[]
  subscriptions Subscription[]
  questionnaireInstances QuestionnaireInstance[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Subscription models
model Subscription {
  id                   String    @id @default(cuid())
  userId               String
  user                 User      @relation(fields: [userId], references: [id])
  stripeSubscriptionId String?   @unique
  stripePriceId        String?
  plan                 String? // e.g., "core", "premium_sexual_health"
  status               String? // e.g., "active", "trialing", "canceled"
  currentPeriodEnd     DateTime?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
}


// Enums for the new Questionnaire system
enum QuestionnaireStatus {
  DRAFT
  ACTIVE
  ARCHIVED
}

enum QuestionnaireVisibility {
  PUBLIC      // For everyone, even logged out
  LOGGED_IN   // For any logged-in user
  PLAN_GATED  // Requires a specific plan
}

enum QuestionType {
  TEXT
  TEXTAREA
  NUMBER
  DATE
  BOOLEAN
  SINGLE_CHOICE
  MULTI_CHOICE
}

// The main questionnaire definition
model Questionnaire {
  id            String                  @id @default(cuid())
  slug          String                  @unique
  title         String
  description   String?
  category      String?
  status        QuestionnaireStatus     @default(ACTIVE)
  visibility    QuestionnaireVisibility @default(LOGGED_IN)
  requiredPlans String                  @default("") // Comma-separated list of plan slugs
  createdAt     DateTime                @default(now())
  updatedAt     DateTime                @updatedAt

  sections  QuestionnaireSection[]
  instances QuestionnaireInstance[]
}

model QuestionnaireSection {
  id              String @id @default(cuid())
  questionnaireId String
  title           String
  description     String?
  order           Int    @default(0)

  questionnaire Questionnaire @relation(fields: [questionnaireId], references: [id], onDelete: Cascade)
  questions     Question[]
}

model Question {
  id           String       @id @default(cuid())
  sectionId    String
  text         String
  questionType QuestionType
  isRequired   Boolean      @default(false)
  options      String?      // Storing JSON as a string for SQLite compatibility
  order        Int          @default(0)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  section QuestionnaireSection @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  answers Answer[]
}

// An instance of a user filling out a questionnaire
model QuestionnaireInstance {
  id              String   @id @default(cuid())
  questionnaireId String
  userId          String
  status          String   @default("IN_PROGRESS") // e.g., IN_PROGRESS, COMPLETED
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  completedAt     DateTime?

  questionnaire Questionnaire @relation(fields: [questionnaireId], references: [id], onDelete: Cascade)
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  answers       Answer[]
}

model Answer {
  id         String @id @default(cuid())
  instanceId String
  questionId String
  value      String // Storing JSON as a string for SQLite compatibility

  instance QuestionnaireInstance @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  question Question              @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@unique([instanceId, questionId])
}
