generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") "file:./dev.db"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                     String                  @id @default(cuid())
  name                   String?
  email                  String?                 @unique
  emailVerified          DateTime?
  image                  String?
  role                   String                  @default("user")
  accounts               Account[]
  sessions               Session[]
  subscriptions          Subscription[]
  questionnaireInstances QuestionnaireInstance[]
  reports                Report[]
  reportRequests         ReportRequest[]
  UserServiceSelection   UserServiceSelection[]
  ServiceSelection       ServiceSelection[]
  CategorySelection      CategorySelection[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Subscription {
  id                   String    @id @default(cuid())
  userId               String
  user                 User      @relation(fields: [userId], references: [id])
  stripeSubscriptionId String?   @unique
  stripePriceId        String?
  plan                 String?
  status               String?
  currentPeriodEnd     DateTime?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
}

enum QuestionnaireStatus {
  DRAFT
  ACTIVE
  ARCHIVED
}

enum QuestionnaireVisibility {
  PUBLIC
  LOGGED_IN
  PLAN_GATED
}

enum QuestionType {
  TEXT
  TEXTAREA
  NUMBER
  DATE
  BOOLEAN
  SINGLE_CHOICE
  MULTI_CHOICE
}

model Questionnaire {
  id            String                  @id @default(cuid())
  slug          String                  @unique
  title         String
  description   String?
  category      String?
  status        QuestionnaireStatus     @default(ACTIVE)
  visibility    QuestionnaireVisibility @default(LOGGED_IN)
  requiredPlans String                  @default("")
  priority      Int                     @default(100)
  createdAt     DateTime                @default(now())
  updatedAt     DateTime                @updatedAt

  sections  QuestionnaireSection[]
  instances QuestionnaireInstance[]
}

model QuestionnaireSection {
  id              String  @id @default(cuid())
  questionnaireId String
  title           String
  description     String?
  order           Int     @default(0)

  questionnaire Questionnaire @relation(fields: [questionnaireId], references: [id], onDelete: Cascade)
  questions     Question[]
}

model Question {
  id           String       @id @default(cuid())
  sectionId    String
  text         String
  questionType QuestionType
  isRequired   Boolean      @default(false)
  options      String?
  order        Int          @default(0)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  section QuestionnaireSection @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  answers Answer[]
}

model QuestionnaireInstance {
  id              String    @id @default(cuid())
  questionnaireId String
  userId          String
  status          String    @default("IN_PROGRESS")
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  completedAt     DateTime?

  questionnaire Questionnaire @relation(fields: [questionnaireId], references: [id], onDelete: Cascade)
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  answers       Answer[]
}

model Answer {
  id         String @id @default(cuid())
  instanceId String
  questionId String
  value      String

  instance QuestionnaireInstance @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  question Question              @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@unique([instanceId, questionId])
}

model ReportRequest {
  id        String   @id @default(cuid())
  userId    String
  type      String
  status    String   @default("QUEUED")
  payload   String?
  createdAt DateTime @default(now())

  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  report Report?
}

model Report {
  id        String   @id @default(cuid())
  requestId String   @unique
  userId    String
  type      String
  title     String
  markdown  String
  createdAt DateTime @default(now())

  request ReportRequest @relation(fields: [requestId], references: [id], onDelete: Cascade)
  user    User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserServiceSelection {
  id        String   @id @default(cuid())
  userId    String
  serviceId String
  selected  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  service Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@unique([userId, serviceId])
}

model Service {
  id          String   @id @default(cuid())
  title       String
  description String?
  categoryId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  category             Category               @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  selections           ServiceSelection[]
  UserServiceSelection UserServiceSelection[]
}

model ServiceSelection {
  id         String   @id @default(cuid())
  userId     String
  categoryId String
  serviceId  String
  createdAt  DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  service Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@unique([userId, serviceId])
}

model CategorySelection {
  id         String   @id @default(cuid())
  userId     String
  categoryId String
  createdAt  DateTime @default(now())

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([userId, categoryId])
}

model Category {
  id             String   @id @default(cuid())
  title          String   @unique
  isCoreIncluded Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  services          Service[]
  CategorySelection CategorySelection[]
}
