import { NextResponse } from "next/server";
import { getServerSession } from "next-auth";
import { authOptions } from "@/lib/auth/options";
import { prisma } from "@/lib/prisma";

export const dynamic = "force-dynamic";

export async function GET() {
  const session = await getServerSession(authOptions);
  if (!session?.user?.email) {
    return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
  }
  const user = await prisma.user.findUnique({ where: { email: session.user.email } });
  if (!user) return NextResponse.json({ error: "Unauthorized" }, { status: 401 });

  const rows = await prisma.categorySelection.findMany({
    where: { userId: user.id },
    select: { categoryId: true },
    orderBy: { createdAt: "desc" },
  });

  return NextResponse.json({ categoryIds: rows.map(r => r.categoryId) });
}

export async function PUT(req: Request) {
  const session = await getServerSession(authOptions);
  if (!session?.user?.email) {
    return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
  }
  const user = await prisma.user.findUnique({ where: { email: session.user.email } });
  if (!user) return NextResponse.json({ error: "Unauthorized" }, { status: 401 });

  const body = await req.json().catch(() => ({})) as any;
  const { categoryId, selected, setIds } = body || {};

  // Replace all selections
  if (Array.isArray(setIds)) {
    await prisma.categorySelection.deleteMany({ where: { userId: user.id } });
    if (setIds.length) {
      await prisma.categorySelection.createMany({
        data: setIds.map((id: string) => ({ userId: user.id, categoryId: id })),
        skipDuplicates: true,
      });
    }
    return NextResponse.json({ ok: true, count: setIds.length });
  }

  // Toggle/specific set for a single category
  if (!categoryId) {
    return NextResponse.json({ error: "categoryId required" }, { status: 400 });
  }

  // guard: must exist
  const exists = await prisma.category.findUnique({ where: { id: categoryId } });
  if (!exists) return NextResponse.json({ error: "Unknown categoryId" }, { status: 400 });

  if (selected === true) {
    await prisma.categorySelection.upsert({
      where: { userId_categoryId: { userId: user.id, categoryId } },
      update: {},
      create: { userId: user.id, categoryId },
    });
  } else if (selected === false) {
    await prisma.categorySelection.deleteMany({ where: { userId: user.id, categoryId } });
  } else {
    // toggle
    const already = await prisma.categorySelection.findUnique({
      where: { userId_categoryId: { userId: user.id, categoryId } },
      select: { id: true },
    });
    if (already) {
      await prisma.categorySelection.delete({ where: { id: already.id } });
    } else {
      await prisma.categorySelection.create({ data: { userId: user.id, categoryId } });
    }
  }

  return NextResponse.json({ ok: true });
}
