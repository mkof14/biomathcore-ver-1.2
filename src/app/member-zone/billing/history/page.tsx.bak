"use client";
import { useEffect, useState } from "react";
import { format } from "date-fns";

type Invoice = {
  id: string;
  number: string | null;
  status: string | null;
  currency: string | undefined;
  total: number | null;
  hosted_invoice_url: string | null;
  created: number | null;
  period_start: number | null;
  period_end: number | null;
};

export default function BillingHistoryPage() {
  const [invoices, setInvoices] = useState<Invoice[]>([]);
  const [loading, setLoading] = useState(true);
  const [err, setErr] = useState<string | null>(null);

  useEffect(() => {
    (async () => {
      setLoading(true);
      setErr(null);
      try {
        const res = await fetch("/api/billing/invoices");
        const json = await res.json();
        if (!res.ok || json?.ok === false)
          throw new Error(json?.error || "Failed");
        setInvoices(json.invoices || []);
      } catch (e: any) {
        setErr(e?.message || "Error");
      } finally {
        setLoading(false);
      }
    })();
  }, []);

  return (
    <section className="max-w-4xl mx-auto px-4 py-8">
      <h1 className="text-2xl font-extrabold">Billing · Invoices</h1>
      <p className="text-sm text-gray-400 mt-1">Your recent invoices.</p>

      <div className="mt-6 card-like overflow-x-auto">
        {loading && <p className="text-gray-400">Loading...</p>}
        {err && <p className="text-red-400">Error: {err}</p>}
        {!loading && !err && invoices.length === 0 && (
          <p className="text-gray-400">No invoices found.</p>
        )}

        {invoices.length > 0 && (
          <table className="table">
            <thead>
              <tr>
                <th>Invoice</th>
                <th>Status</th>
                <th>Amount</th>
                <th>Created</th>
                <th>Link</th>
              </tr>
            </thead>
            <tbody>
              {invoices.map((inv) => (
                <tr key={inv.id}>
                  <td>{inv.number ?? inv.id}</td>
                  <td className="capitalize">{inv.status ?? "n/a"}</td>
                  <td>
                    {inv.total != null && inv.currency
                      ? `${(inv.total / 100).toFixed(2)} ${inv.currency}`
                      : "n/a"}
                  </td>
                  <td>
                    {inv.created
                      ? format(new Date(inv.created), "yyyy-MM-dd HH:mm")
                      : "n/a"}
                  </td>
                  <td>
                    {inv.hosted_invoice_url ? (
                      <a
                        className="text-cyan-300 hover:underline"
                        href={inv.hosted_invoice_url}
                        target="_blank"
                        rel="noreferrer"
                      >
                        View
                      </a>
                    ) : (
                      "—"
                    )}
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        )}
      </div>
    </section>
  );
}
