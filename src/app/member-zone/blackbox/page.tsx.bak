"use client";
import { useEffect, useState } from "react";

type Job = {
  id: string;
  status?: string;
  createdAt?: string;
  updatedAt?: string;
  title?: string;
};

async function listJobs(): Promise<Job[]> {
  const r = await fetch("/api/blackbox/jobs", { cache: "no-store" });
  if (!r.ok) return [];
  const j = await r.json();
  return j?.data ?? j ?? [];
}

async function createJob(): Promise<Job | null> {
  const r = await fetch("/api/blackbox/jobs", {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ title: "Demo blackbox job", payload: { sample: true } }),
  });
  if (!r.ok) return null;
  const j = await r.json();
  return j?.data ?? j ?? null;
}

async function cancelJob(id: string): Promise<boolean> {
  // Prefer explicit cancel route if present
  const cancel = await fetch(`/api/blackbox/jobs/${id}/cancel`, { method: "POST" });
  if (cancel.ok) return true;
  // Fallback: DELETE on /jobs/[id]
  const del = await fetch(`/api/blackbox/jobs/${id}`, { method: "DELETE" });
  return del.ok;
}

export default function BlackBoxPage() {
  const [items, setItems] = useState<Job[]>([]);
  const [busy, setBusy] = useState(false);

  const load = async () => {
    setBusy(true);
    try { setItems(await listJobs()); } finally { setBusy(false); }
  };

  useEffect(() => { load(); }, []);

  const create = async () => {
    setBusy(true);
    try {
      const j = await createJob();
      if (j) setItems([j, ...items]);
    } finally { setBusy(false); }
  };

  const cancel = async (id: string) => {
    setBusy(true);
    try {
      const ok = await cancelJob(id);
      if (ok) setItems(items.map(x => x.id === id ? { ...x, status: "canceled" } : x));
    } finally { setBusy(false); }
  };

  return (
    <div className="max-w-3xl mx-auto p-6 space-y-4">
      <h1 className="text-2xl font-semibold">BlackBox Jobs</h1>
      <div className="flex gap-2">
        <button onClick={create} disabled={busy} className="px-3 py-2 rounded bg-black text-white disabled:opacity-50">
          Run BlackBox Job
        </button>
        <button onClick={load} disabled={busy} className="px-3 py-2 rounded border">
          Refresh
        </button>
      </div>

      <ul className="divide-y border rounded">
        {items.length === 0 && (
          <li className="p-4 text-sm text-gray-500">No jobs yet.</li>
        )}
        {items.map((j) => (
          <li key={j.id} className="p-4 flex items-center justify-between gap-3">
            <div className="min-w-0">
              <div className="font-medium truncate">{j.title || "(untitled job)"}</div>
              <div className="text-xs text-gray-500 truncate">ID: {j.id}</div>
              <div className="text-xs text-gray-500">Status: {j.status || "unknown"}</div>
            </div>
            <div className="shrink-0 flex gap-2">
              <button onClick={() => cancel(j.id)} className="px-3 py-1 rounded border">Cancel</button>
            </div>
          </li>
        ))}
      </ul>
    </div>
  );
}
