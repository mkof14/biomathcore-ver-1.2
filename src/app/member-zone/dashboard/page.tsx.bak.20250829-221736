import { Card, CardHeader, CardTitle, CardContent, CardFooter } from "@/components/ui/safe-card";
"use client";

import Link from "next/link";
import { useEffect, useState } from "react";

/** локальный минимальный Card, чтобы не тянуть внешние импорты */
function Card({ children }: { children: React.ReactNode }) {
  return (
    <div className="rounded-xl border border-neutral-800 bg-neutral-950/40">
      {children}
    </div>
  );
}
function CardHeader({ children }: { children: React.ReactNode }) {
  return <div className="p-4 border-b border-neutral-800">{children}</div>;
}
function CardTitle({ children }: { children: React.ReactNode }) {
  return <div className="text-lg font-semibold">{children}</div>;
}
function CardContent({ children }: { children: React.ReactNode }) {
  return <div className="p-5">{children}</div>;
}
function CardFooter({ children }: { children: React.ReactNode }) {
  return <div className="p-4 border-t border-neutral-800 flex items-center gap-2">{children}</div>;
}

/** Кнопки без «линк-пилюлек» */
function LinkButton({
  href,
  children,
  variant = "primary",
}: {
  href: string;
  children: React.ReactNode;
  variant?: "primary" | "ghost";
}) {
  const base = "inline-flex items-center justify-center rounded-md px-3 py-2 text-sm transition";
  const styles =
    variant === "primary"
      ? "bg-blue-600 hover:bg-blue-500 text-white"
      : "bg-transparent hover:bg-neutral-800 border border-neutral-700 text-neutral-200";
  return (
    <Link href={href} target="_blank" className={`${base} ${styles}`}>
      {children}
    </Link>
  );
}

type Summary = { ai: number; voice: number; dg: number; blackbox?: number; devices?: number };

function StatCard({
  title,
  value,
  healthHref,
  exportHref,
}: {
  title: string;
  value: number | string;
  healthHref: string;
  exportHref: string;
}) {
  return (
    <Card>
      <CardHeader>
        <CardTitle>{title}</CardTitle>
      </CardHeader>
      <CardContent>
        <div className="text-6xl font-bold tabular-nums">{value}</div>
      </CardContent>
      <CardFooter>
        <LinkButton href={healthHref}>Health</LinkButton>
        <LinkButton href={exportHref} variant="ghost">Export CSV</LinkButton>
      </CardFooter>
    </Card>
  );
}

export default function DashboardPage() {
  const [data, setData] = useState<Summary>({ ai: 0, voice: 0, dg: 0, blackbox: 0, devices: 0 });
  const [loading, setLoading] = useState(false);
  const [err, setErr] = useState<string | null>(null);

  async function load() {
    setLoading(true);
    setErr(null);
    try {
      const res = await fetch("/api/dashboard/summary", { cache: "no-store" });
      const j = await res.json();
      if (!res.ok || !j?.ok) throw new Error(j?.error || "Failed to load");
      setData({
        ai: j.data.ai ?? 0,
        voice: j.data.voice ?? 0,
        dg: j.data.dg ?? 0,
        blackbox: j.data.blackbox ?? 0,
        devices: j.data.devices ?? 0,
      });
    } catch (e: any) {
      setErr(e?.message || "Error");
    } finally {
      setLoading(false);
    }
  }

  useEffect(() => { load(); }, []);

  return (
    <div className="px-6 py-6 space-y-6">
      <div className="flex items-center justify-between">
        <h1 className="text-2xl font-semibold">Dashboard</h1>
        <div className="text-sm text-neutral-400">
          {loading ? "Refreshing…" : err ? <span className="text-red-500">{err}</span> : "Up to date"}
        </div>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
        <StatCard
          title="AI"
          value={loading ? "…" : data.ai}
          healthHref="/api/ai/health"
          exportHref="/api/ai/export?limit=1000"
        />
        <StatCard
          title="Voice"
          value={loading ? "…" : data.voice}
          healthHref="/api/voice/health"
          exportHref="/api/voice/export?limit=1000"
        />
        <StatCard
          title="Drug–Gene"
          value={loading ? "…" : data.dg}
          healthHref="/api/drug-gene/health"
          exportHref="/api/drug-gene/export?limit=1000"
        />
        <StatCard
          title="BlackBox"
          value={loading ? "…" : (data.blackbox ?? 0)}
          healthHref="/api/blackbox/health"
          exportHref="/api/blackbox/export?limit=1000"
        />
        <StatCard
          title="Devices"
          value={loading ? "…" : (data.devices ?? 0)}
          healthHref="/api/devices/health"
          exportHref="/api/devices/export?limit=1000"
        />
      </div>
    </div>
  );
}
