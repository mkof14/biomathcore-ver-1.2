"use client";
// src/app/member-zone/devices/page.tsx
import { useState } from "react";
import Link from "next/link";
import { useDevices } from "@/hooks/useDevices";

export default function DevicesPage() {
  const { data, loading, error, add, remove, refetch } = useDevices();
  const [busy, setBusy] = useState(false);
  const [form, setForm] = useState<{ type: string; name: string }>({
    type: "",
    name: "",
  });
  const [actionErr, setActionErr] = useState<string | null>(null);

  const onAdd = async () => {
    setActionErr(null);
    if (!form.type || !form.name) {
      setActionErr("Please fill both fields.");
      return;
    }
    try {
      setBusy(true);
      await add({ type: form.type, name: form.name });
      setForm({ type: "", name: "" });
    } catch (e: any) {
      setActionErr(e?.message || "Failed to add device");
    } finally {
      setBusy(false);
    }
  };

  return (
    <section className="px-4 sm:px-6 lg:px-8 py-8 text-gray-100">
      {/* Header */}
      <div className="flex flex-col md:flex-row md:items-end md:justify-between gap-4 mb-8">
        <div>
          <h1 className="text-2xl md:text-3xl font-extrabold tracking-tight">
            Connected Devices
          </h1>
          <p className="text-sm text-gray-400 mt-1">
            Connect and manage your health devices and integrations.
          </p>
        </div>

        <div className="flex items-center gap-3">
          <Link
            href="/member-zone"
            className="btn btn-muted"
            aria-label="Back to Member Zone"
          >
            ← Back to Member Zone
          </Link>
        </div>
      </div>

      {/* Add device form */}
      <div className="panel mb-8">
        <h2 className="text-xl font-bold mb-3">Connect new device</h2>

        <div className="grid grid-cols-1 md:grid-cols-3 gap-3">
          <select
            className="select"
            value={form.type}
            onChange={(e) => setForm((s) => ({ ...s, type: e.target.value }))}
          >
            <option value="">Choose integration…</option>
            <option value="oura">Oura Ring</option>
            <option value="whoop">WHOOP</option>
            <option value="fitbit">Fitbit</option>
            <option value="apple-health">Apple Health</option>
            <option value="garmin">Garmin</option>
          </select>

          <input
            className="input"
            placeholder="Device name (e.g., Oura Gen3)"
            value={form.name}
            onChange={(e) => setForm((s) => ({ ...s, name: e.target.value }))}
          />

          <button onClick={onAdd} disabled={busy} className="btn btn-primary">
            {busy ? "Adding…" : "Add device"}
          </button>
        </div>

        {actionErr && <p className="text-sm text-red-300 mt-3">{actionErr}</p>}
      </div>

      {/* Devices list */}
      <div className="panel">
        <div className="flex items-center justify-between mb-3">
          <h2 className="text-xl font-bold">Your devices</h2>
          <button onClick={() => refetch()} className="btn btn-ghost">
            Refresh
          </button>
        </div>

        {loading && <p className="text-gray-300">Loading devices…</p>}

        {error && (
          <p className="text-red-300">
            Failed to load devices: {String(error)}
          </p>
        )}

        {!loading && !error && (!data || data.length === 0) && (
          <p className="text-gray-300">No devices connected yet.</p>
        )}

        <div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-3">
          {(data || []).map((d) => (
            <div key={d.id} className="card-like device-tile">
              <div className="flex items-start justify-between gap-3">
                <div className="min-w-0">
                  <div className="flex items-center gap-2">
                    <span className="badge capitalize">{d.type}</span>
                    <span
                      className={`badge ${
                        d.status === "connected"
                          ? "text-emerald-300"
                          : "text-amber-300"
                      }`}
                    >
                      {d.status}
                    </span>
                  </div>
                  <h3 className="mt-2 font-semibold truncate">{d.name}</h3>
                  <p className="text-sm text-gray-400 mt-1">
                    Connected:{" "}
                    {d.connectedAt
                      ? new Date(d.connectedAt).toLocaleString()
                      : "—"}
                  </p>
                </div>

                <button
                  onClick={() => remove(d.id)}
                  className="btn btn-ghost"
                  aria-label={`Remove ${d.name}`}
                >
                  Remove
                </button>
              </div>
            </div>
          ))}
        </div>
      </div>
    </section>
  );
}
