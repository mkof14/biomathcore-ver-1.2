"use client";

import { useEffect, useMemo, useState } from "react";
import Link from "next/link";
import { usePathname, useRouter, useSearchParams } from "next/navigation";
import FiltersBar from "@/components/reports/FiltersBar";
import { toast } from "react-toastify";

type Row = { id: string; title: string; status: string; createdAt: string; updatedAt: string; };
type ListResp = { ok: boolean; data: Row[]; nextCursor?: string|null };

function buildUrl(base: string, q: Record<string,string|undefined>) {
  const u = new URL(base, typeof window==="undefined" ? "http://localhost:3000" : window.location.origin);
  Object.entries(q).forEach(([k,v]) => {
    if (v && String(v).length) u.searchParams.set(k, String(v));
    else u.searchParams.delete(k);
  });
  return u.toString();
}

export default function ReportsListPage() {
  const router = useRouter();
  const pathname = usePathname();
  const sp = useSearchParams();

  // init from query
  const init = useMemo(()=>({
    q: sp.get("q") || "",
    status: sp.get("status") || "",
    from: sp.get("from") || "",
    to: sp.get("to") || ""
  }), [sp]);

  const [rows, setRows] = useState<Row[]>([]);
  const [loading, setLoading] = useState(false);
  const [cursor, setCursor] = useState<string | null>(null);
  const [nextCursor, setNextCursor] = useState<string | null>(null);

  async function fetchList(reset=false) {
    setLoading(true);
    const params: Record<string,string> = {
      limit: "20",
      ...(init.q ? { q: init.q } : {}),
      ...(init.status ? { status: init.status } : {}),
      ...(init.from ? { from: init.from } : {}),
      ...(init.to ? { to: init.to } : {}),
      ...(cursor ? { cursor } : {}),
    };
    const qs = new URLSearchParams(params).toString();
    const res = await fetch(`/api/reports?${qs}`, { cache: "no-store" });
    setLoading(false);

    if (!res.ok) {
      toast.error(`Load failed: ${res.status}`);
      return;
    }
    const j: ListResp = await res.json();
    if (reset) setRows(j.data || []);
    else setRows(prev => [...prev, ...(j.data || [])]);
    setNextCursor(j.nextCursor || null);
  }

  // initial + when query changes -> reset
  useEffect(() => {
    setRows([]); setCursor(null); setNextCursor(null);
    fetchList(true);
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [init.q, init.status, init.from, init.to]);

  function onFiltersChange(v: { q?: string; status?: string; from?: string; to?: string }) {
    // sync query string
    const url = buildUrl(pathname, {
      q: v.q || "",
      status: v.status || "",
      from: v.from || "",
      to: v.to || ""
    });
    router.replace(url);
    // fetchList вызовется через useEffect (по изменению init.*)
  }

  async function createQuick() {
    const title = prompt("Title for new report?", "New report");
    if (!title) return;
    const res = await fetch("/api/reports", {
      method: "POST",
      headers: {"Content-Type":"application/json"},
      body: JSON.stringify({ title, status: "draft" })
    });
    if (!res.ok) { toast.error(`Create failed: ${res.status}`); return; }
    toast.success("Created");
    // reload first page
    router.replace(buildUrl(pathname, { q: init.q, status: init.status, from: init.from, to: init.to }));
  }

  return (
    <div className="p-6 space-y-6">
      <h1 className="text-2xl font-semibold">Reports</h1>

      <FiltersBar
        initQ={init.q}
        initStatus={init.status}
        initFrom={init.from}
        initTo={init.to}
        onChange={onFiltersChange}
      />

      <div className="flex gap-2">
        <button onClick={createQuick} className="border rounded px-3 py-2">+ New</button>
        <a href="/api/reports/export?limit=1000" className="border rounded px-3 py-2">
          Export ZIP (all)
        </a>
      </div>

      <div className="overflow-x-auto">
        <table className="min-w-[640px] border">
          <thead>
            <tr className="bg-gray-50">
              <th className="text-left p-2 border">Title</th>
              <th className="text-left p-2 border">Status</th>
              <th className="text-left p-2 border">Created</th>
              <th className="text-left p-2 border">Actions</th>
            </tr>
          </thead>
          <tbody>
            {rows.map((r) => (
              <tr key={r.id} className="odd:bg-white even:bg-gray-50">
                <td className="p-2 border">{r.title}</td>
                <td className="p-2 border">{r.status}</td>
                <td className="p-2 border">{new Date(r.createdAt).toLocaleString()}</td>
                <td className="p-2 border">
                  <Link className="underline" href={`/member-zone/reports/${r.id}`}>open</Link>
                </td>
              </tr>
            ))}
            {!rows.length && !loading && (
              <tr>
                <td className="p-3 border text-gray-500" colSpan={4}>No items.</td>
              </tr>
            )}
          </tbody>
        </table>
      </div>

      <div className="flex items-center gap-3">
        <button
          disabled={!nextCursor || loading}
          onClick={() => { if (nextCursor) { setCursor(nextCursor); fetchList(false); } }}
          className="border rounded px-4 py-2 disabled:opacity-50"
        >
          {loading ? "Loading…" : nextCursor ? "Load more" : "No more"}
        </button>
      </div>
    </div>
  );
}
